{"version":3,"sources":["Components/Task/Task.js","Components/TasksForm/TasksForm.js","App.js","serviceWorker.js","index.js"],"names":["Task","props","state","name","creationDate","isDone","toggleDoneStatus","bind","this","setState","formCheckClassNames","push","FormCheck","className","type","defaultChecked","onClick","onChange","taskDone","FormLabel","Button","variant","taskDeleted","disabled","lang","delete","React","Component","TasksForm","tasks","inputValue","isInputValueValid","nextId","addTask","addTaskOnEnter","changeInputValue","displayTasks","getFormattedDate","isInputValid","deleteTask","markTaskAsDone","displayProgressBar","id","currentNextId","ev","key","filteredTasks","filter","task","taskIndex","findIndex","Number","currentTasks","changedTask","length","now","ProgressBar","striped","label","toFixed","taskCreatedDate","Date","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minute","getMinutes","taskAdded","target","value","Card","ListGroup","map","ListGroupItem","inputClassNames","Header","todoList","Body","InputGroup","FormControl","placeholder","inputTask","onKeyUp","onKeyDown","Append","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c303e85a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Task.css';\r\nimport lang from '../../assets/lang/lang.json';\r\nimport { FormCheck , FormLabel, Button } from 'react-bootstrap';\r\n\r\nclass Task extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tname: this.props.name,\r\n\t\t\tcreationDate: this.props.creationDate,\r\n\t\t\tisDone: this.props.isDone\r\n\t\t}\r\n\t\t\r\n\t\tthis.toggleDoneStatus = this.toggleDoneStatus.bind(this);\r\n\t}\r\n\r\n\ttoggleDoneStatus() {\r\n\t\tthis.setState({isDone: !this.state.isDone});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst formCheckClassNames = [];\r\n\t\tif (this.state.isDone) {\r\n\t\t\tformCheckClassNames.push('task-done');\r\n\t\t} \r\n\t\t\r\n\t\treturn (\r\n\t\t\t<FormCheck className={formCheckClassNames}>\r\n\t\t\t\t<p>{this.state.creationDate}</p>\t\r\n\t\t\t\t<input \r\n\t\t\t\t\tclassName=\"form-check-input\" \r\n\t\t\t\t\ttype=\"checkbox\" \r\n\t\t\t\t\tdefaultChecked={this.state.isDone}\r\n\t\t\t\t\tonClick={this.toggleDoneStatus}\r\n\t\t\t\t\tonChange={this.props.taskDone}\r\n\t\t\t\t/>\r\n\t\t\t\t<FormLabel>\r\n\t\t\t\t\t{this.state.name}\r\n\t\t\t\t</FormLabel>\r\n\t\t\t\t<Button variant=\"danger\" onClick={this.props.taskDeleted} disabled={this.state.isDone}> {lang.delete} </Button>\r\n\t\t\t</FormCheck>\r\n\t\t)\r\n\t}\r\n};\r\n\r\nexport default Task;\r\n","import React from 'react';\r\nimport './TasksForm.css';\r\nimport Task from '../Task/Task';\r\nimport lang from '../../assets/lang/lang.json';\r\nimport { Card , InputGroup , ListGroup , ListGroupItem , Button , FormControl , ProgressBar } from 'react-bootstrap';\r\n\r\nclass TasksForm extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\ttasks: [],\r\n\t\t\tinputValue: \"\",\r\n\t\t\tisInputValueValid: true,\r\n\t\t\tnextId: 1\r\n\t\t}\r\n\t\t\r\n\t\tthis.addTask = this.addTask.bind(this);\r\n\t\tthis.addTaskOnEnter = this.addTaskOnEnter.bind(this);\r\n\t\tthis.changeInputValue = this.changeInputValue.bind(this);\r\n\t\tthis.displayTasks = this.displayTasks.bind(this);\r\n\t\tthis.getFormattedDate = this.getFormattedDate.bind(this);\r\n\t\tthis.isInputValid = this.isInputValid.bind(this);\r\n\t\tthis.deleteTask = this.deleteTask.bind(this);\r\n\t\tthis.markTaskAsDone = this.markTaskAsDone.bind(this);\r\n\t\tthis.displayProgressBar = this.displayProgressBar.bind(this);\r\n\t}\r\n\r\n\taddTask() {\r\n\t\tif (this.state.isInputValueValid) {\r\n\t\t\tif (this.state.inputValue) {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\ttasks: [ ...this.state.tasks, \r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: this.state.inputValue, \r\n\t\t\t\t\t\t\tcreationDate: this.getFormattedDate(), \r\n\t\t\t\t\t\t\tid: this.state.nextId,\r\n\t\t\t\t\t\t\ttaskDone: false\r\n\t\t\t\t\t\t},\r\n\t\t\t\t ],\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tlet currentNextId = this.state.nextId;\r\n\t\t\tthis.setState({inputValue: \"\"});\r\n\t\t\tthis.setState({nextId: ++currentNextId});\r\n\t\t}\r\n\t}\t\r\n\r\n\taddTaskOnEnter(ev){\r\n\t\tif (ev.key === 'Enter') {\r\n     this.addTask();\r\n    }\r\n\t}\r\n\r\n\tdeleteTask(id) {\r\n\t\tlet filteredTasks = this.state.tasks.filter( (task) => {return task.id !== id});\r\n\t\tthis.setState({tasks: filteredTasks});\r\n\t}\r\n\r\n\tmarkTaskAsDone(id) {\r\n\t\tlet component = this;\r\n\t\tlet taskIndex = component.state.tasks.findIndex((task) => { return task.id === Number(id)});\r\n\t\tlet currentTasks = component.state.tasks;\r\n\t\tlet changedTask = currentTasks[taskIndex];\r\n\t\tchangedTask.taskDone = !changedTask.taskDone;\r\n\r\n\t\tcomponent.setState({tasks: currentTasks});\r\n\t}\r\n\r\n\tdisplayProgressBar() {\r\n    if (this.state.tasks.length * 100) {\r\n\t\t\tlet countDone = this.state.tasks.filter( (task) => {return task.taskDone});\r\n\t\t\tlet now =  countDone.length / this.state.tasks.length * 100;\r\n\t\r\n\t\t\treturn ( <ProgressBar striped variant=\"success\" now={now} label={`${now.toFixed(0)}%`}/>)\r\n\t\t}\r\n\t\treturn ( <ProgressBar striped variant=\"success\" now={0} label={`${0}%`}/>)\r\n\t}\r\n\r\n\tgetFormattedDate() {\r\n\t\tconst taskCreatedDate = new Date();\r\n\r\n\t\tconst day = taskCreatedDate.getDate();\r\n\t\tconst month = taskCreatedDate.getMonth() + 1;\r\n\t\tconst year = taskCreatedDate.getFullYear();\r\n\t\t\r\n\t\tlet hour = taskCreatedDate.getHours();\r\n\t\t\tif (hour < 10) { hour = \"0\" + hour };\r\n\t\tlet minute = taskCreatedDate.getMinutes();\r\n\t\t\tif (minute < 10) { minute = \"0\" + minute };\r\n\t\t\r\n\t\tconst creationDate = `${lang.taskAdded}: ${day}-${month}-${year}, ${hour}:${minute}`\r\n\t\t\r\n\t\treturn creationDate;\r\n\t}\r\n\r\n\tchangeInputValue(ev) {\r\n\t\tthis.setState({inputValue: ev.target.value});\r\n\t}\r\n\t\r\n\tdisplayTasks() {\r\n\t\tif (this.state.tasks.length > 0) {\r\n\t\t\treturn (\r\n\t\t\t\t<Card>\r\n\t\t\t\t\t<ListGroup>\r\n\t\t\t\t\t\t{this.state.tasks.map( (task) => {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<ListGroupItem key={task.id}>\r\n\t\t\t\t\t\t\t\t\t\t\t<Task \r\n\t\t\t\t\t\t\t\t\t\t\t\tname={task.name} \r\n\t\t\t\t\t\t\t\t\t\t\t\tcreationDate={task.creationDate} \r\n\t\t\t\t\t\t\t\t\t\t\t\ttaskDeleted={this.deleteTask.bind(this, task.id)} \r\n\t\t\t\t\t\t\t\t\t\t\t\ttaskDone={this.markTaskAsDone.bind(this, task.id)}\r\n\t\t\t\t\t\t\t\t\t\t\t\tisDone={task.taskDone}\r\n\t\t\t\t\t\t\t\t\t\t\t\t/> \r\n\t\t\t\t\t\t\t\t\t\t</ListGroupItem>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</ListGroup>\r\n\t\t\t\t</Card>\r\n\t\t\t) \r\n\t\t}\r\n\t}\r\n\r\n\tisInputValid() {\r\n\t\tif (this.state.inputValue.length > 100) {\r\n\t\t\tthis.setState({isInputValueValid: false})\r\n\t\t} else {\r\n\t\t\tthis.setState({isInputValueValid: true})\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst inputClassNames = [];\r\n\t\tif (!this.state.isInputValueValid) {\r\n\t\t\tinputClassNames.push('invalid');\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<Card>\r\n\t\t\t\t<Card.Header> {lang.todoList} </Card.Header>\r\n\t\t\t\t<Card.Body>\r\n\t\t\t\t\t<InputGroup>\r\n\t\t\t\t\t\t<FormControl\r\n\t\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\t\tclassName={inputClassNames}\r\n\t\t\t\t\t\t\tplaceholder={lang.inputTask} \r\n\t\t\t\t\t\t\tvalue={this.state.inputValue} \r\n\t\t\t\t\t\t\tonChange={this.changeInputValue}\r\n\t\t\t\t\t\t\tonKeyUp={this.isInputValid}\r\n\t\t\t\t\t\t\tonKeyDown={this.addTaskOnEnter}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<InputGroup.Append>\r\n\t\t\t\t\t\t\t<Button variant=\"primary\" onClick={this.addTask}>+</Button>\r\n\t\t\t\t\t\t</InputGroup.Append>\r\n\t\t\t\t\t</InputGroup>\r\n\t\t\t\t\t{this.displayProgressBar()}\r\n\t\t\t\t\t{this.displayTasks()}\r\n\t\t\t\t</Card.Body>\r\n\t\t\t</Card>\r\n\t\t)\r\n\t}\r\n};\r\n\r\nexport default TasksForm;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TasksForm from './Components/TasksForm/TasksForm';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container\">\r\n      <TasksForm />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}