{"version":3,"sources":["Components/Task/Task.js","Components/TasksForm/TasksForm.js","App.js","serviceWorker.js","index.js"],"names":["Task","formCheckClassNames","this","props","isDone","push","FormCheck","className","creationDate","type","onChange","taskDone","checked","FormLabel","name","Button","variant","onClick","taskDeleted","disabled","lang","delete","React","Component","TasksForm","state","tasks","inputValue","isInputValueValid","nextId","addTask","bind","addTaskOnEnter","changeInputValue","displayTasks","getFormattedDate","isInputValid","deleteTask","markTaskAsDone","displayProgressBar","setState","id","currentNextId","ev","key","filteredTasks","filter","task","taskIndex","findIndex","Number","currentTasks","changedTask","length","now","ProgressBar","striped","label","toFixed","taskCreatedDate","Date","day","getDate","month","getMonth","year","getFullYear","hour","getHours","minute","getMinutes","taskAdded","target","value","Card","Body","Tabs","defaultActiveKey","Tab","eventKey","title","all","ListGroup","map","ListGroupItem","done","notDone","inputClassNames","Header","todoList","InputGroup","FormControl","placeholder","inputTask","onKeyUp","onKeyDown","Append","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e894552.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Task.css';\r\nimport lang from '../../assets/lang/lang.json';\r\nimport { FormCheck , FormLabel, Button } from 'react-bootstrap';\r\n\r\nclass Task extends React.Component {\r\n\r\n\trender() {\r\n\t\tconst formCheckClassNames = [];\r\n\t\t\r\n\t\tif (this.props.isDone) {\r\n\t\t\tformCheckClassNames.push('task-done');\r\n\t\t} \r\n\r\n\t\treturn (\r\n\t\t\t<FormCheck className={formCheckClassNames}>\r\n\t\t\t\t<p>{this.props.creationDate}</p>\t\r\n\t\t\t\t<input \r\n\t\t\t\t\tclassName=\"form-check-input\" \r\n\t\t\t\t\ttype=\"checkbox\" \r\n\t\t\t\t\tonChange={this.props.taskDone}\r\n\t\t\t\t\tchecked={this.props.isDone}\r\n\t\t\t\t/>\r\n\t\t\t\t<FormLabel>\r\n\t\t\t\t\t{this.props.name}\r\n\t\t\t\t</FormLabel>\r\n\t\t\t\t<Button variant=\"danger\" onClick={this.props.taskDeleted} disabled={this.props.isDone}> {lang.delete} </Button>\r\n\t\t\t</FormCheck>\r\n\t\t)\r\n\t}\r\n};\r\n\r\nexport default Task;\r\n","import React from 'react';\r\nimport './TasksForm.css';\r\nimport Task from '../Task/Task';\r\nimport lang from '../../assets/lang/lang.json';\r\nimport { Card , InputGroup , ListGroup , ListGroupItem , Button , FormControl , ProgressBar , Tab , Tabs } from 'react-bootstrap';\r\n\r\nclass TasksForm extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\ttasks: [],\r\n\t\t\tinputValue: \"\",\r\n\t\t\tisInputValueValid: true,\r\n\t\t\tnextId: 1\r\n\t\t}\r\n\t\t\r\n\t\tthis.addTask = this.addTask.bind(this);\r\n\t\tthis.addTaskOnEnter = this.addTaskOnEnter.bind(this);\r\n\t\tthis.changeInputValue = this.changeInputValue.bind(this);\r\n\t\tthis.displayTasks = this.displayTasks.bind(this);\r\n\t\tthis.getFormattedDate = this.getFormattedDate.bind(this);\r\n\t\tthis.isInputValid = this.isInputValid.bind(this);\r\n\t\tthis.deleteTask = this.deleteTask.bind(this);\r\n\t\tthis.markTaskAsDone = this.markTaskAsDone.bind(this);\r\n\t\tthis.displayProgressBar = this.displayProgressBar.bind(this);\r\n\t}\r\n\r\n\taddTask() {\r\n\t\tif (this.state.isInputValueValid) {\r\n\t\t\tif (this.state.inputValue) {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\ttasks: [ ...this.state.tasks, \r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tname: this.state.inputValue, \r\n\t\t\t\t\t\t\tcreationDate: this.getFormattedDate(), \r\n\t\t\t\t\t\t\tid: this.state.nextId,\r\n\t\t\t\t\t\t\ttaskDone: false\r\n\t\t\t\t\t\t},\r\n\t\t\t\t ],\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tlet currentNextId = this.state.nextId;\r\n\t\t\tthis.setState({inputValue: \"\"});\r\n\t\t\tthis.setState({nextId: ++currentNextId});\r\n\t\t}\r\n\t}\t\r\n\r\n\taddTaskOnEnter(ev){\r\n\t\tif (ev.key === 'Enter') {\r\n     this.addTask();\r\n    }\r\n\t}\r\n\r\n\tdeleteTask(id) {\r\n\t\tlet filteredTasks = this.state.tasks.filter( (task) => {return task.id !== id});\r\n\t\tthis.setState({tasks: filteredTasks});\r\n\t}\r\n\r\n\tmarkTaskAsDone(id) {\r\n\t\tlet component = this;\r\n\t\tlet taskIndex = component.state.tasks.findIndex((task) => { return task.id === Number(id)});\r\n\t\tlet currentTasks = component.state.tasks;\r\n\t\tlet changedTask = currentTasks[taskIndex];\r\n\t\tchangedTask.taskDone = !changedTask.taskDone;\r\n\r\n\t\tcomponent.setState({tasks: currentTasks});\r\n\t}\r\n\r\n\tdisplayProgressBar() {\r\n    if (this.state.tasks.length > 0) {\r\n\t\t\tlet countDone = this.state.tasks.filter( (task) => {return task.taskDone});\r\n\t\t\tlet now =  countDone.length / this.state.tasks.length * 100;\r\n\t\r\n\t\t\treturn ( <ProgressBar striped variant=\"success\" now={now} label={`${now.toFixed(0)}%`}/>)\r\n\t\t}\r\n\t\treturn ( <ProgressBar striped variant=\"success\" now={0} label={`${0}%`}/>)\r\n\t}\r\n\r\n\tgetFormattedDate() {\r\n\t\tconst taskCreatedDate = new Date();\r\n\r\n\t\tconst day = taskCreatedDate.getDate();\r\n\t\tconst month = taskCreatedDate.getMonth() + 1;\r\n\t\tconst year = taskCreatedDate.getFullYear();\r\n\t\t\r\n\t\tlet hour = taskCreatedDate.getHours();\r\n\t\t\tif (hour < 10) { hour = \"0\" + hour };\r\n\t\tlet minute = taskCreatedDate.getMinutes();\r\n\t\t\tif (minute < 10) { minute = \"0\" + minute };\r\n\t\t\r\n\t\tconst creationDate = `${lang.taskAdded}: ${day}-${month}-${year}, ${hour}:${minute}`\r\n\t\t\r\n\t\treturn creationDate;\r\n\t}\r\n\r\n\tchangeInputValue(ev) {\r\n\t\tthis.setState({inputValue: ev.target.value});\r\n\t}\r\n\r\n\tdisplayTasks() {\r\n\t\tif (this.state.tasks.length > 0) {\r\n\t\t\treturn (\r\n\t\t\t\t<Card>\r\n\t\t\t\t\t<Card.Body>\r\n\t\t\t\t\t\t<Tabs defaultActiveKey=\"all\" id=\"uncontrolled-tab-example\">\r\n\t\t\t\t\t\t\t<Tab eventKey=\"all\" title={lang.all}>\r\n\t\t\t\t\t\t\t\t<ListGroup>\r\n\t\t\t\t\t\t\t\t\t{this.state.tasks\r\n\t\t\t\t\t\t\t\t\t\t.map( (task) => {\r\n\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<ListGroupItem key={task.id}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Task \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname={task.name} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcreationDate={task.creationDate} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttaskDeleted={this.deleteTask.bind(this, task.id)} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttaskDone={this.markTaskAsDone.bind(this, task.id)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tisDone={task.taskDone}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/> \r\n\t\t\t\t\t\t\t\t\t\t\t\t</ListGroupItem>\r\n\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</ListGroup>\r\n\t\t\t\t\t\t\t</Tab>\r\n\t\t\t\t\t\t\t<Tab eventKey=\"done\" title={lang.done}>\r\n\t\t\t\t\t\t\t\t<ListGroup>\r\n\t\t\t\t\t\t\t\t\t{this.state.tasks\r\n\t\t\t\t\t\t\t\t\t\t.filter( (task) => {return task.taskDone})\r\n\t\t\t\t\t\t\t\t\t\t.map( (task) => {\r\n\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<ListGroupItem key={task.id}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Task \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname={task.name} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcreationDate={task.creationDate} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttaskDeleted={this.deleteTask.bind(this, task.id)} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttaskDone={this.markTaskAsDone.bind(this, task.id)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tisDone={task.taskDone}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/> \r\n\t\t\t\t\t\t\t\t\t\t\t\t</ListGroupItem>\r\n\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</ListGroup>\r\n\t\t\t\t\t\t\t</Tab>\r\n\t\t\t\t\t\t\t<Tab eventKey=\"notDone\" title={lang.notDone}>\r\n\t\t\t\t\t\t\t\t<ListGroup>\r\n\t\t\t\t\t\t\t\t\t{this.state.tasks\r\n\t\t\t\t\t\t\t\t\t\t\t.filter( (task) => {return !task.taskDone})\r\n\t\t\t\t\t\t\t\t\t\t\t.map( (task) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<ListGroupItem key={task.id}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Task \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tname={task.name} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcreationDate={task.creationDate} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttaskDeleted={this.deleteTask.bind(this, task.id)} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttaskDone={this.markTaskAsDone.bind(this, task.id)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tisDone={task.taskDone}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/> \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</ListGroupItem>\r\n\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t</ListGroup>\r\n\t\t\t\t\t\t\t</Tab>\r\n\t\t\t\t\t\t</Tabs>\r\n\t\t\t\t\t</Card.Body>\r\n\t\t\t\t</Card>\r\n\t\t\t) \r\n\t\t}\r\n\t}\r\n\r\n\tisInputValid() {\r\n\t\tif (this.state.inputValue.length > 100) {\r\n\t\t\tthis.setState({isInputValueValid: false})\r\n\t\t} else {\r\n\t\t\tthis.setState({isInputValueValid: true})\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst inputClassNames = [];\r\n\t\tif (!this.state.isInputValueValid) {\r\n\t\t\tinputClassNames.push('invalid');\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<Card>\r\n\t\t\t\t<Card.Header> {lang.todoList} </Card.Header>\r\n\t\t\t\t<Card.Body>\r\n\t\t\t\t\t<InputGroup>\r\n\t\t\t\t\t\t<FormControl\r\n\t\t\t\t\t\t\ttype=\"text\" \r\n\t\t\t\t\t\t\tclassName={inputClassNames}\r\n\t\t\t\t\t\t\tplaceholder={lang.inputTask} \r\n\t\t\t\t\t\t\tvalue={this.state.inputValue} \r\n\t\t\t\t\t\t\tonChange={this.changeInputValue}\r\n\t\t\t\t\t\t\tonKeyUp={this.isInputValid}\r\n\t\t\t\t\t\t\tonKeyDown={this.addTaskOnEnter}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<InputGroup.Append>\r\n\t\t\t\t\t\t\t<Button variant=\"primary\" onClick={this.addTask}>+</Button>\r\n\t\t\t\t\t\t</InputGroup.Append>\r\n\t\t\t\t\t</InputGroup>\r\n\t\t\t\t\t{this.displayProgressBar()}\r\n\t\t\t\t\t{this.displayTasks()}\r\n\t\t\t\t</Card.Body>\r\n\t\t\t</Card>\r\n\t\t)\r\n\t}\r\n};\r\n\r\nexport default TasksForm;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TasksForm from './Components/TasksForm/TasksForm';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container\">\r\n      <TasksForm />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}